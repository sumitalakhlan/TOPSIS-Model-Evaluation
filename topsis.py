# -*- coding: utf-8 -*-
"""Topsis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nps0zqNHdX64VHQLHsfV5I48b6IDhK4L
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler

# Sample decision matrix with models and evaluation metrics
data = {
    'Model': ['BERT', 'RoBERTa', 'DistilBERT', 'GPT', 'XLNet'],
    'Accuracy': [0.92, 0.91, 0.89, 0.90, 0.88],
    'Precision': [0.93, 0.92, 0.90, 0.91, 0.89],
    'Recall': [0.91, 0.90, 0.88, 0.89, 0.87],
    'F1-Score': [0.92, 0.91, 0.89, 0.90, 0.88],
    'Training_Time': [60, 55, 50, 65, 70]  # Lower is better
}

df = pd.DataFrame(data)

# Normalize the data (Min-Max Normalization)
scaler = MinMaxScaler()
df_norm = df[['Accuracy', 'Precision', 'Recall', 'F1-Score', 'Training_Time']].copy()
df_norm[['Accuracy', 'Precision', 'Recall', 'F1-Score']] = scaler.fit_transform(df_norm[['Accuracy', 'Precision', 'Recall', 'F1-Score']])

# Normalize the 'Training_Time' as it is a cost metric (lower value is better)
df_norm['Training_Time'] = (df['Training_Time'] - df['Training_Time'].min()) / (df['Training_Time'].max() - df['Training_Time'].min())

# Ideal and negative ideal solutions
ideal = df_norm.max()
negative_ideal = df_norm.min()

# Calculate Euclidean distances to ideal and negative ideal
D_plus = np.sqrt(((df_norm - ideal) ** 2).sum(axis=1))
D_minus = np.sqrt(((df_norm - negative_ideal) ** 2).sum(axis=1))

# Calculate relative closeness to the ideal solution
C = D_minus / (D_plus + D_minus)

# Add the closeness values to the original DataFrame
df['Closeness'] = C

# Sort models by closeness to ideal solution
df_sorted = df.sort_values(by='Closeness', ascending=False)

# Save the results to CSV
df_sorted.to_csv('evaluation_metrics.csv', index=False)

# Display the rankings
print(df_sorted[['Model', 'Closeness']])

# Plot the relative closeness of each model
plt.figure(figsize=(10, 6))
plt.bar(df_sorted['Model'], df_sorted['Closeness'], color='skyblue')
plt.xlabel('Model')
plt.ylabel('Relative Closeness')
plt.title('TOPSIS Ranking of Text Classification Models')
plt.xticks(rotation=45)
plt.tight_layout()
# Save the plot as an image
plt.savefig('model_rankings.png')
# Show the plot
plt.show()